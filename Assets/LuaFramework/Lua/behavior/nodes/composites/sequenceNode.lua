---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yuanhuan.
--- DateTime: 2020/10/26 10:12
---

---@class sequenceNode : CompositeNode
sequenceNode = BaseClass(CompositeNode)

function sequenceNode:Tick(delta_time)
    if self.children then
        local abort_type = self:GetAbortType()
        for i, v in ipairs(self.children) do
            if abort_type == eAbortType.Both or abort_type == eAbortType.Lower then
                if self.parent:IsComposite() and self.parent.state == eNodeState.Running and v:IsCondition() then
                    v:SetState(v:Tick(delta_time))
                    if v.state == eNodeState.Failure then
                        return v.state
                    end
                    if not v:IsChangedState() and v.state == eNodeState.Failure then
                        self:AbortLowerNode()
                    end
                end
            end
            if abort_type == eAbortType.Both or abort_type == eAbortType.Self then
                if self.state == eNodeState.Running and v:IsCondition() then
                    v:SetState(v:Tick(delta_time))
                    if v.state == eNodeState.Failure then
                        self:AbortSelfNode(i + 1) --打断i后的子节点
                        return v.state
                    end
                end
            end
            if v.state == nil or v.state == eNodeState.Running then
                v:SetState(v:Tick(delta_time))
                if v.state ~= eNodeState.Success then
                    return v.state
                end
            end
        end
    end
    return eNodeState.Success
end

function sequenceNode:AbortSelfNode(start_index)
    for i = start_index, #self.children do
        local child = self.children[i]
        if child.state == eNodeState.Running then
            child:SetState(child:Abort())
        end
    end
end

function sequenceNode:AbortLowerNode()

end