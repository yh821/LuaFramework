---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2023/4/4 22:03
---

require("behavior/behaviorManager")

---@class AiManager
---@field _bt_list behaviorTree[]
AiManager = AiManager or BaseClass()

function AiManager:__init()
	if AiManager.Instance then
		logError("[AiManager] attempt to create singleton twice!")
		return
	end
	AiManager.Instance = self

	self._bt_list = {}

	Runner.Instance:AddRunObj(self, 9)
end

function AiManager:__delete()
	Runner.Instance:RemoveRunObj(self)

	self._bt_list = nil

	AiManager.Instance = nil
end

function AiManager:Update(realtime, delta_time)
	behaviorManager:tick(delta_time)
end

function AiManager:StartThinking(is_on)
	behaviorManager:switchTick(is_on)
end

function AiManager:BindBT(scene_obj, file, data)
	local bt = behaviorManager:bindBehaviorTree(file, data)
	if not bt then
		return
	end
	local bts = self._bt_list[scene_obj]
	if not bts then
		bts = {}
		self._bt_list[scene_obj] = bts
	end
	bts:setSharedVar(AiConfig.scene_obj, scene_obj)
	bts[bt.uid] = bt
	return bt
end

function AiManager:UnBindBT(scene_obj, uid)
	local bts = self._bt_list[scene_obj]
	if not bts then
		return
	end
	if uid then
		bts[uid] = nil
		behaviorManager:unBindBehaviorTree(uid)
	else
		for k, v in pairs(bts) do
			bts[k] = nil
			behaviorManager:unBindBehaviorTree(v.uid)
		end
	end
end
